eff Fget : ∀[].∀{}.() -> int_[];;
eff Fset : ∀[].∀{}.(int) -> int_[];;

eff ex : ∀[e].∀{f : Fget}.(int, bool) -> int_[e, ~f];;

let counter : ∀[].∀{lget : Fget, lset : Fset}.(int) -> int_[~lget, ~lset] =
  fun f [] {lget : Fget, lset : Fset} (n : int) : int_[~lget, ~lset] is
    let i : int = raise lget () in
      if i = 0 then 
        n 
      else 
        raise lset (i - 1) ; f {lget lset} (n+1)
    end
  end
in 
  let main : ∀[].∀{}.(int) -> int_[] =
    fun g [] {} (n : int) : int_[] is
      dcl s : int := n in
        handle lget : Fget = (fun fget [] {} () : int_[] is !s end) in
          handle lset : Fset = (fun fset [] {} (n : int) : int_[] is s := n end) in
            counter {lget lset} n
          end
        end
      end
    end
  in 
    main 10
  end
end
;;
