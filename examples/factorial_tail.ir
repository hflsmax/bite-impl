FullFun main
  Args: []
    Let factorial_fptr = FullFun factorialRec
        Args: [env, n, acc]
          If BOP ==  Var n  Int 0
          Then
            Var acc
          Else
            FullApply
              LHS: Var factorialRec
              Args: [Var env, AOP -  Var n  Int 1, AOP *  Var acc  Var n]
    in
      Let factorial_env = ^ Aux
      in
        Let factorialTail_fptr = FullFun factorialTail_1
            Args: [env, n]
              FullApply
                LHS: Var factorialRec
                Args: [Var factorial_env, Var n, Int 1]
        in
          Let factorialTail_env = ^ Aux
          in
            FullApply
              LHS: Var Print
              Args: [FullApply
                LHS: Var factorialTail_1
                Args: [Var factorialTail_env, Int 100100100]]