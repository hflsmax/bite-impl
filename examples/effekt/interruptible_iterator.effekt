import immutable/list

effect Yield(value: Int): Unit / { Replace, Behead }
effect Replace(value: Int): Unit
effect Behead(): Unit

// The original example from Zhang OOPSLA 2020 is written with a mutable linked list and requires
// the child to raise Behead to the parent in order to remove itself from the list.
// Here we can remove the element directly by not including it in the result of the recursive call.
def iter(l: List[Int]): List[Int] / { Yield } = {
    // can't use l.tail and l.head because of a type inference error from the compiler
    var hd = l match {
        case Nil() => 42
        case Cons(a, rest) => a
    };
    val tl = l match {
        case Nil() => Nil()
        case Cons(a, rest) => rest
    };
    var toBehead = false;
    
    try { do Yield(hd) }
    with Replace { n =>
        hd = n;
        resume(())
    }
    with Behead { () =>
        toBehead = true;
        resume(())
    };

    if (tl.isEmpty) [hd]
    else {
        val newTail = iter(tl);
        if (toBehead) newTail else Cons(hd, newTail)
    }
}

def main() = ignoring[EmptyList] {
    var lst = [0, 1, 3, 0 - 2, 0 - 8, 9];

    val res = try { lst.iter }
    with Yield { x =>
      resume { if (x < 0) do Behead() else do Replace(x * 2) }
    };

    println(res)
}
