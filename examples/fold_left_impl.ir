FullFun main
  Args: []
    Let arrLen = ^ Int 100100100
    in
      Let arr = ^ FullApply
          LHS: Var ArrayInit
          Args: [Var arrLen]
      in
        Decl iterIdx = ^ Int 0
        in
          Let iterNext_fptr = FullFun iterNext_1
              Args: [env, exc_fptr, exc_env, exc_jb]
                If BOP <  Deref Var iterIdx  Var arrLen
                Then
                  Seq
                    Assign
                      Var iterIdx
                      AOP +  Deref Var iterIdx  Int 1
                    FullApply
                      LHS: Var ArrayGet
                      Args: [Var arr, AOP -  Deref Var iterIdx  Int 1]
                Else
                  FullApply
                    LHS: Var exc_fptr
                    Args: [Var exc_env, Var exc_jb]
          in
            Let iterNext_env = ^ Aux
            in
              Let add_fptr = FullFun add_2
                  Args: [env, a, b]
                    AOP +  Var a  Var b
              in
                Let add_env = ^ Aux
                in
                  Let foldLeft_fptr = FullFun foldLeftRec
                      Args: [env, op_fptr, op_env, acc]
                        Decl next = Int 0
                        in
                          Decl toBreak = Bool false
                          in
                            Seq
                              Let exc_fptr = FullFun exc_3
                                  Args: [env, jb]
                                    Let jmpret = ^ Seq
                                        Assign
                                          Var toBreak
                                          Bool true
                                        Int 0
                                    in
                                      FullApply
                                        LHS: Var longjmp
                                        Args: [Var jb, Int 1]
                              in
                                Let exc_env = Aux
                                in
                                  Let exc_jb = Aux
                                  in
                                    If FullApply
                                        LHS: Var !setjmp
                                        Args: [Var exc_jb]
                                    Then
                                      Assign
                                        Var next
                                        FullApply
                                          LHS: Var iterNext_1
                                          Args: [Var iterNext_env, Var exc_fptr, Var exc_env, Var exc_jb]
                                    Else
                                      Var jmpret
                              If Deref Var toBreak
                              Then
                                Var acc
                              Else
                                FullApply
                                  LHS: Var foldLeftRec
                                  Args: [Var env, Var op_fptr, Var op_env, FullApply
                                    LHS: Var op_fptr
                                    Args: [Var op_env, Var acc, Deref Var next]]
                  in
                    Let foldLeft_env = ^ Aux
                    in
                      FullApply
                        LHS: Var Print
                        Args: [FullApply
                          LHS: Var foldLeftRec
                          Args: [Var foldLeft_env, Var add_fptr, Var add_env, Int 0]]