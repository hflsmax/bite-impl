FullFun main
  Args: []
    Let iter_fptr = FullFun iterRec
        Args: [env, l, yield_fptr, yield_env, yield_jb, behead_fptr, behead_env, behead_jb]
          Let iterRec_env = Var env
          in
            Seq
              Let replace_fptr = FullFun replace_2
                  Args: [env, jb, x]
                    FullApply
                      LHS: Var IterSetInt
                      Args: [Var l, Var x]
              in
                Let replace_env = Aux
                in
                  Let replace_jb = Aux
                  in
                    FullApply
                      LHS: Var yield_fptr
                      Args: [Var yield_env, Var yield_jb, FullApply
                        LHS: Var IterGetInt
                        Args: [Var l], Var replace_fptr, Var replace_env, Var replace_jb, Var behead_fptr, Var behead_env, Var behead_jb]
              If FullApply
                  LHS: Var IterHasNext
                  Args: [Var l]
              Then
                Int 0
              Else
                Let localBehead_fptr = FullFun localBehead_1
                    Args: [env, jb]
                      FullApply
                        LHS: Var IterRemoveNext
                        Args: [Var l]
                in
                  Let localBehead_env = Aux
                  in
                    Let localBehead_jb = Aux
                    in
                      FullApply
                        LHS: Var iterRec
                        Args: [Var iterRec_env, FullApply
                          LHS: Var IterNext
                          Args: [Var l], Var yield_fptr, Var yield_env, Var yield_jb, Var localBehead_fptr, Var localBehead_env, Var localBehead_jb]
    in
      Let iter_env = ^ Aux
      in
        Decl list = ^ FullApply
            LHS: Var ListNewStatic
            Args: []
        in
          Seq
            FullApply
              LHS: Var ListInit
              Args: [Deref Var list, Int 100100100]
            Let yield_fptr = FullFun yield_3
                Args: [env, jb, x, replace_fptr, replace_env, replace_jb, behead_fptr, behead_env, behead_jb]
                  If BOP ==  AOP %  Var x  Int 2  Int 0
                  Then
                    FullApply
                      LHS: Var behead_fptr
                      Args: [Var behead_env, Var behead_jb]
                  Else
                    FullApply
                      LHS: Var replace_fptr
                      Args: [Var replace_env, Var replace_jb, AOP *  Var x  Int 2]
            in
              Let yield_env = Aux
              in
                Let yield_jb = Aux
                in
                  Let behead_fptr = FullFun behead_4
                      Args: [env, jb]
                        FullApply
                          LHS: Var ListRemoveFirstElement
                          Args: [Deref Var list]
                  in
                    Let behead_env = Aux
                    in
                      Let behead_jb = Aux
                      in
                        FullApply
                          LHS: Var Print
                          Args: [FullApply
                            LHS: Var iterRec
                            Args: [Var iter_env, Deref Var list, Var yield_fptr, Var yield_env, Var yield_jb, Var behead_fptr, Var behead_env, Var behead_jb]]