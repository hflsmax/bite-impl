eff NoSuchElement : ∀[].∀{}.() -> Int_[];;

let arrLen = 100100100 in
let arr = ArrayInit arrLen in

dcl iterIdx := 0 in
let iterNext = fn [] {exc : NoSuchElement} () : Int_[~exc] is 
    if !iterIdx < arrLen then
        iterIdx := !iterIdx + 1;
        ArrayGet arr (!iterIdx - 1)
    else
        raise exc ()
end in

let add = fn [] {} (a : Int, b : Int) : Int_[] is a + b end in

let foldLeft =
    fun foldLeftRec [] {} (op : ∀[].∀{}.(Int, Int) -> Int_[], acc : Int) : Int_[] is
        dcl next := 0 in
        dcl toBreak := false in
            handle exc : NoSuchElement = fn [] {} () : Int_[] is toBreak := true; 0 end in
                next := iterNext {exc} ()
            end;
            if (!toBreak) then
                acc
            else
                foldLeftRec op (op acc !next)
        end
        end
    end 
in
    Print (foldLeft add 0)
end
end
end
end
end
end