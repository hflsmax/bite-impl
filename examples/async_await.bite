
eff Fork : ∀[].∀{}.(∀[].∀{lyield:Yield, lfork:Fork}.() -> Unit_[~lyield,~lfork]) -> Unit_[];;
eff Yield : ∀[].∀{}.() -> Unit_[];;


dcl partialResult := 0 in
dcl runq := ListNew () in
let suspend = fn [] {} (r : Cont Unit_[] -> Unit_[]) : Unit_[] is
    ListAppendCont !runq r
end in
let runNext = fn [] {} () : Unit_[] is
    if ListIsEmpty !runq then
        unit
    else
        let k = ListPopFirstElementCont !runq in
            resume {k} unit
        end
end in
let spawn = fun spawnRec [] {} (f : ∀[].∀{lyield:Yield, lfork:Fork}.() -> Unit_[~lyield,~lfork]) : Unit_[] is
    handle lyield : Yield = fn [] {} (k : Cont Unit_[] -> Unit_[]) : Unit_[] is
        suspend k; runNext ()
    end in
        handle lfork : Fork = fn [] {} (forkf : ∀[].∀{lyield:Yield, lfork:Fork}.() -> Unit_[~lyield,~lfork], k : Cont Unit_[] -> Unit_[]) : Unit_[] is
            suspend k; spawnRec forkf
        end in
            f {lyield lfork} ()
        end
    end
end in
    let nYield = 100 in
    let nJob = 100100 in
        let job = fn [] {lyield:Yield, lfork:Fork} () : Unit_[~lyield,~lfork] is
            let job0 = fun jobRec [] {lyield:Yield, lfork:Fork} (i : Int) : Unit_[~lyield,~lfork] is
                if 0 < i then
                    raise lyield ();
                    partialResult := !partialResult + 1;
                    jobRec {lyield lfork} (i - 1)
                else
                    unit
            end in
                job0 {lyield lfork} nYield
            end
        end in
            let start = fn [] {lyield:Yield, lfork:Fork} () : Unit_[~lyield,~lfork] is
                let start0 = fun startRec [] {lyield:Yield, lfork:Fork} (i : Int) : Unit_[~lyield,~lfork] is
                    if 0 < i then
                        raise lfork job;
                        startRec {lyield lfork} (i - 1)
                    else
                        unit
                end in
                    start0 {lyield lfork} nJob
                end
            end in
                spawn start;
                Print !partialResult
            end
        end
    end
    end
end
end
end
end
end